# Check to see if there is a position open, if not open the trade
        if position == False:
            # Finds DTE if we're for the MWF trading schedule
            if CurrentDay.strftime("%a") == "Mon" or "Wed":
                DTE = 2
            elif CurrentDay.strftime("%a") == "Fri":
                DTE = 3
            else:
                continue

            # Start at-the-money and begin to go down in strike to find a short option
            for iShort in range(100):
                # Grab the necessary information for calculating price on BS
                Strike = math.floor(SPYOpen)-iShort
                IV = IVFits[DTE-1].slope * VIXOpen + IVFits[DTE-1].intercept

                # Short option strike > Long option strike by 1
                ShortPut = OC.black_scholes("SPY", SPYOpen, Strike, TNXOpen/100, DTE, IV/100, "P")
                MoneynessShort = Strike - SPYOpen
                LongPut = OC.black_scholes("SPY", SPYOpen, Strike-Width, TNXOpen/100, DTE, IV/100, "P")
                MoneynessLong = (Strike-Width) - SPYOpen

                # If we are less than our Delta amount, exit the loop as the spread meets requirements
                if abs(ShortPut.delta) <= TradeNumbers[2]:
                    break
            
            # Grab differences in prices from the historical data
            PriceDiffShort = PricingCoeffs[CurrentDay.year-2010][DTE-1][0] * \
                 np.exp(-PricingCoeffs[CurrentDay.year-2010][DTE-1][1] * MoneynessShort**2 * 0.5) / (2*np.pi)
            PriceDiffLong = PricingCoeffs[CurrentDay.year-2010][DTE-1][0] * \
                 np.exp(-PricingCoeffs[CurrentDay.year-2010][DTE-1][1] * MoneynessLong**2 * 0.5) / (2*np.pi)
            
            # Apply the differences to the short and long put price options
            ShortPrice = ShortPut.price - PriceDiffShort
            LongPrice = LongPut.price -  PriceDiffLong

            # Net Credit of the spread
            NetCredit = abs(round(ShortPrice - LongPrice, 2))

            # Check to see if the spread is even worth taking on
            if (100*NetCredit) < 10:
                continue

            # Defined risk = Width - Credit
            SpreadRisk = (Width-NetCredit) * 100

            # Maximum number of spreads to fit within our risk profile
            NumberSpreads = math.floor(MaxRisk / SpreadRisk)

            # Date the spread must be closed by
            DateForceClose = CurrentDay + datetime.timedelta(days=DTE)

            # Date the spread was opened to check for # of day trades
            DateOpened = CurrentDay

            # Assume a position is open and update it 
            position = True
            StratInfo[1] += 1

            # Account for brokerage comissions
            Comissions = 2 * NumberSpreads
            if NumberSpreads > 10:
                Comissions = 20
            StratInfo[2] += Comissions
            StratInfo[8] += NumberSpreads

            # Debit to close at
            ClosingAmount = (1 - TradeNumbers[3]) * NetCredit


        # Now that a position is open we need to go through intraday and check
        # to see if that position needs to be closed, and update balances accordingly
        if position == True:
            # Iterate over the linspace'd open/close prices and check to see if the position is closed
            for iIntraday in range(len(SPYIntraday)):
                SPYPrice = SPYIntraday[iIntraday]
                RFRR = TNXIntraday[iIntraday]

                if DTE == 0:
                    IV = IVFits[0].slope * VIXIntraday[iIntraday] + IVFits[0].intercept
                    TTE = 1 - iIntraday/14
                else:
                    TTE = DTE + (iIntraday/14) 
                    IV = IVFits[DTE-1].slope * VIXIntraday[iIntraday] + IVFits[DTE-1].intercept
                
                # Calculate the new current value of the spread and check to see if we can close it
                ShortPutIntraday = OC.black_scholes("SPY", SPYPrice, Strike, RFRR/100, TTE, IV/100, "P")
                LongPutIntraday = OC.black_scholes("SPY", SPYPrice, Strike-Width, RFRR/100, TTE, IV/100, "P")
                
                MoneynessIntradayShort = Strike - SPYPrice
                MoneynessIntradayLong = (Strike-Width) - SPYPrice

                # Grab differences in prices from the historical data - must have edge case for 0 DTE
                if DTE == 0:
                    PriceDiffIntradayShort = PricingCoeffs[CurrentDay.year-2010][0][0] * \
                        np.exp(-PricingCoeffs[CurrentDay.year-2010][0][1] * MoneynessIntradayShort**2 * 0.5) / (2*np.pi)
                    PriceDiffIntradayLong = PricingCoeffs[CurrentDay.year-2010][0][0] * \
                        np.exp(-PricingCoeffs[CurrentDay.year-2010][0][1] * MoneynessIntradayLong**2 * 0.5) / (2*np.pi)
                else:
                    PriceDiffIntradayShort = PricingCoeffs[CurrentDay.year-2010][DTE-1][0] * \
                        np.exp(-PricingCoeffs[CurrentDay.year-2010][DTE-1][1] * MoneynessIntradayShort**2 * 0.5) / (2*np.pi)
                    PriceDiffIntradayLong = PricingCoeffs[CurrentDay.year-2010][DTE-1][0] * \
                        np.exp(-PricingCoeffs[CurrentDay.year-2010][DTE-1][1] * MoneynessIntradayLong**2 * 0.5) / (2*np.pi)
                
                # Apply the differences to the short and long put price options
                ShortPrice = ShortPutIntraday.price - PriceDiffIntradayShort
                LongPrice = LongPutIntraday.price -  PriceDiffIntradayLong

                # Calculate the closing debit - cost the neutralize the position, sell the long and buy back the short
                ClosingDebit =  abs(round(LongPrice - ShortPrice, 2))

                # Checkt to see if the position has made enough credit via theta-decay to close the position
                if ClosingDebit < ClosingAmount or (((CurrentDay == DateForceClose) and\
                     iIntraday == len(SPYIntraday))) or ClosingDebit == 0.01:

                    # Day trade check
                    # Uncomment to disable day trades and force closing on different day than opening
                    if CurrentDay == DateOpened:
                        break

                    # Close the position
                    position = False

                    # Check if closed on the opening day - then it was a day trade
                    if CurrentDay == DateOpened:
                        StratInfo[3] +=1

                    # If we're at DTE = 0 & hit the end of intra day and still haven't closed, then it is
                    # a partial/maximum loss trade
                    if (DTE == 0 and iIntraday == len(SPYIntraday)):
                        
                        # Check for maximum loss trade
                        if SPYIntraday[iIntraday] <= (Strike-Width):
                            # Add one to the maximum loss counter
                            StratInfo[4] += 1
                            # Subtract the total risked amount from the account balance
                            TradeNumbers[0] = TradeNumbers[0] - (SpreadRisk * NumberSpreads - Comissions)


                        # Check for partially lost trades
                        elif SPYIntraday[iIntraday] < (Strike) and SPYIntraday[iIntraday] >= (Strike-Width):
                            # Add one to the partial loss counter
                            StratInfo[5] +=1
                            # Check to see if any revenue was made
                            Revenue = NumberSpreads * (NetCredit - ClosingDebit)
                            if Revenue <= 0: Taxes = 0 
                            elif Revenue > 0: Taxes = Revenue * 0.33
                            # Add the revnue to the account balance
                            TradeNumbers[0] = TradeNumbers[0] + (Revenue - Taxes - Comissions)
                            StratInfo[6] += Taxes
                        
                    # If neither of those losses are met, then we've made maximum profit
                    elif SPYIntraday[iIntraday] >= Strike:
                        # Update various balances and check for things like losses and/or day trades
                        Revenue =  NumberSpreads * (NetCredit - ClosingDebit) * 100
                        Taxes = Revenue * 0.33
                        TradeNumbers[0] = TradeNumbers[0] + (Revenue -  Taxes - Comissions)
                        StratInfo[6] += Taxes
                        break

        # Every time we iterate, go down in DTE
        if DTE > 0 and position:
            DTE -= 1
    
    # Total profit from all the trading
    StratInfo[0] = round(TradeNumbers[0], 2)

    # Total taxes from all the trading
    StratInfo[6] = round(float(StratInfo[6]), 2)