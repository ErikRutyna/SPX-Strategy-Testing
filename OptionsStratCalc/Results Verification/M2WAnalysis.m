%% M2W Peformance Analysis
close all
clc
%% Backtests information from geo
IFA = importfile("C:\Users\Erik\Desktop\devMisc\OptionsCalc\OptionsStratCalc\SPX Testing\M2W Testing\IFResults.csv", [2, Inf]);
IFC = [];
IFD = [];
IFU = [];
for i=1:size(out, 1)
    if table2array(IFA(i, 'tradetypeIFIC')) == 'IFC'
        IFC = [IFC; i];
    elseif table2array(IFA(i, 'tradetypeIFIC')) == 'IFD'
        IFD = [IFD; i];
    elseif table2array(IFA(i, 'tradetypeIFIC')) == 'IFU'
        IFU = [IFU; i];        
    end
end
IFC = IFA(IFC,:);
IFD = IFA(IFD, :);
IFU = IFA(IFU, :);
%% Aiming the IF
close all
PreviousDay = datetime('today');
DayArray = [];
Results = [];
for i=1:size(IFA, 1)
    CurrentDay =  table2array(IFA(i, 'date'));
    if PreviousDay == CurrentDay
        continue
    end
    
    % Grab the 3 prices from the output file
    T400 = table2array(IFA(i, 'Spot1600'));
    T59 = table2array(IFA(i, 'Spot1559'));
    T58 = table2array(IFA(i, 'Spot1558'));
    T57 = table2array(IFA(i, 'Spot1557'));
    
    % Predict where SPX is going to land
    P400 = ClosePredic(T59, T58, T57);
    
    DailyArray = [P400, T400, P400-T400, (P400-T400)/T400*100];

   
    PreviousDay = CurrentDay;

    Results = [Results; DailyArray];
end

figure(1)
hold on
histogram(Results(:, 3), 250)
xlim([-15, 15])

figure(2)
hold on
histogram(Results(:, 4), 250)
xlim([-1, 1])

%% Helper Functions
function [PredicClose] =  ClosePredic(T59, T58, T57)
% Predict where SPX is going to close to help aim our IC's

% Grab our derivatives
[T59D1, T59D2] = DerivCalc(T59, T58, T57);

% Forward Euler to close, dt = 1
ApproxClose = T59 + T59D1 + T59D2;

% Find our derivatives at the false state
[T400D1, T400D2] = DerivCalc(ApproxClose, T59, T58);

% Average our false and actual states to get a better approximation
PredicClose = T59 + 1/2 * (T59D1 + T59D2 + T400D1 + T400D2);
end
function [FDeriv, SDeriv] = DerivCalc(T59, T58, T57)
% Second order first deriv, first order second deriv
FDeriv = (3*T59 - 4*T58 + T57)/2;
SDeriv = (T59 -  2*T58 + T57)/1;
end
function outR = importfile(filename, dataLines)
%IMPORTFILE Import data from a text file
%  OUTR = IMPORTFILE(FILENAME) reads data from text file FILENAME for
%  the default selection.  Returns the data as a table.
%
%  OUTR = IMPORTFILE(FILE, DATALINES) reads data for the specified row
%  interval(s) of text file FILENAME. Specify DATALINES as a positive
%  scalar integer or a N-by-2 array of positive scalar integers for
%  dis-contiguous row intervals.
%
%  Example:
%  outR = importfile("C:\Users\Erik\Downloads\outR.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 31-Jul-2021 18:32:57

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 22);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["date", "tradetypeIFIC", "PL", "Credit", "Risk", "Spot1557", "Spot1558", "Spot1559", "Spot1600", "shortcallstrike", "longcallstrike", "shortputstrike", "longputstrike", "check1", "differencetoshortput", "differencetoshortcall", "momentum", "VarName18", "VarName19", "VarName20", "VarName21", "VarName22"];
opts.VariableTypes = ["datetime", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "categorical", "double", "double", "categorical", "double", "double", "categorical", "double", "double", "categorical", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["shortputstrike", "differencetoshortput", "VarName18", "VarName21"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, "date", "InputFormat", "yyyy-MM-dd");
opts = setvaropts(opts, "tradetypeIFIC", "TrimNonNumeric", true);
opts = setvaropts(opts, "tradetypeIFIC", "ThousandsSeparator", ",");

% Import the data
outR = readtable(filename, opts);

end